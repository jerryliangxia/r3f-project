/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useState } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { Select } from "@react-three/postprocessing";
import PizzaTimeDiv from "./3d-descriptions/Unmasked";
import * as THREE from "three";

export default function PizzaTime(props) {
  const { nodes, materials } = useGLTF("/pizzatime.glb");
  const [enabled, setEnabled] = useState(false);
  let timeoutId = null;

  const handlePointerOver = (event) => {
    event.stopPropagation();
    if (timeoutId) {
      clearTimeout(timeoutId);
    }
    document.body.style.cursor = "pointer";
    setEnabled(true);
  };

  const handlePointerOut = () => {
    if (timeoutId) {
      clearTimeout(timeoutId);
    }
    timeoutId = setTimeout(() => {
      document.body.style.cursor = "default";
      setEnabled(false);
    }, 10); // delay in milliseconds
  };

  const material = new THREE.MeshStandardMaterial({
    color: "white",
  });
  const [uTime, setUTime] = useState(0);

  const customUniforms = {
    uTime: { value: uTime },
  };

  material.onBeforeCompile = (shader) => {
    shader.uniforms.uTime = customUniforms.uTime;
    shader.vertexShader = shader.vertexShader.replace(
      "#include <common>",
      `
            #include <common>

            uniform float uTime;

            mat2 get2dRotateMatrix(float _angle)
            {
                return mat2(cos(_angle), - sin(_angle), sin(_angle), cos(_angle));
            }
        `
    );
    shader.vertexShader = shader.vertexShader.replace(
      "#include <beginnormal_vertex>",
      `
            #include <beginnormal_vertex>
    
            float angle = (position.y + uTime) * 1.1;
            mat2 rotateMatrix = get2dRotateMatrix(angle);
    
            objectNormal.xz = rotateMatrix * objectNormal.xz;
        `
    );
    shader.vertexShader = shader.vertexShader.replace(
      "#include <begin_vertex>",
      `
            #include <begin_vertex>
    
            transformed.xz = rotateMatrix * transformed.xz;
        `
    );
  };

  useFrame((state, delta) => {
    customUniforms.uTime.value += delta;
    setUTime((prevUTime) => (prevUTime + delta) % 50);
  });

  return (
    <Select enabled={enabled && props.isActualWorkbenchClicked}>
      <group
        {...props}
        dispose={null}
        position={props.position.map(
          (value, index) => value + [0, -0.05, 0][index]
        )}
        rotation-y={props.rotationY}
        scale={props.scale}
        onPointerOver={handlePointerOver}
        onPointerOut={handlePointerOut}
        onClick={(event) => {
          event.stopPropagation();
          props.setHtmlComponent(<PizzaTimeDiv />);
          props.setShowDiv(true);
        }}
      >
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes["Spider-Man_Redmesh"].geometry}
            material={materials.Red}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes["Spider-Man_Redmesh_1"].geometry}
            material={materials.Blue}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes["Spider-Man_Redmesh_2"].geometry}
            material={materials.White}
          />
        </group>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube.geometry}
          material={materials.Gray}
        />
        <group
          position={[0.216, 1.413, 0.228]}
          rotation={[0, -0.676, 0]}
          scale={0.114}
        >
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Plane_1.geometry}
            material={materials.Cheese}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Plane_2.geometry}
            material={materials["Brown ish"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Plane_3.geometry}
            material={materials.Red}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Plane_4.geometry}
            material={materials.Green}
          />
        </group>
        <group
          position={[-0.225, -0.347, -0.471]}
          rotation={[0.342, 0.557, -0.167]}
          scale={0.981}
        >
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.FBHead_mesh001_1.geometry}
            material={materials["Procedural Skin head"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.FBHead_mesh001_2.geometry}
            material={materials.Material}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.FBHead_mesh001_3.geometry}
            material={materials.Lips}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.FBHead_mesh001_4.geometry}
            material={materials.White}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.FBHead_mesh001_5.geometry}
            material={materials["Dark Brown"]}
          />
        </group>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube001.geometry}
          material={materials.Material}
          position={[0.146, 1.665, 0.171]}
          rotation={[0.342, 0.557, -0.167]}
          scale={[0.134, 0.024, 0.119]}
        />
        <group position={[-0.012, 0.934, 0.051]} scale={0.836}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle001.geometry}
            material={materials["Brown ish"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle001_1.geometry}
            material={materials.Red}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle001_2.geometry}
            material={materials.Cheese}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle001_3.geometry}
            material={materials["Brown ish"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle001_4.geometry}
            material={materials.Green}
          />
        </group>
        <group position={[-0.182, 0.395, -0.528]} scale={[0.727, 1.324, 0.727]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cube003_1.geometry}
            material={materials.Black}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cube003_2.geometry}
            material={materials["Brick 1"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cube003_3.geometry}
            material={materials["Brick 2"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cube003_4.geometry}
            material={materials["Brick 3"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cube003_5.geometry}
            material={materials["Dark Gray"]}
          />
        </group>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube002.geometry}
          material={material}
          position={[-0.104, 1.259, 0.359]}
          rotation={[-0.013, 0.001, -0.075]}
          scale={[0.055, 0.226, 0.055]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube004.geometry}
          material={material}
          position={[-0.022, 1.158, 0.354]}
          rotation={[-0.043, -0.007, -0.228]}
          scale={[0.028, 0.159, 0.028]}
        />
      </group>
    </Select>
  );
}

useGLTF.preload("/pizzatime.glb");
