/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React from "react";
import { useTexture, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import * as THREE from "three";

export default function Spid(props) {
  const { nodes } = useGLTF("/spid.glb");
  const bakedTexture = useTexture("/baked_mask.jpg");
  bakedTexture.flipY = false;

  const material = new THREE.MeshStandardMaterial({
    map: bakedTexture,
  });

  // Uniforms
  const customUniforms = {
    uTime: { value: 0 },
  };

  material.onBeforeCompile = (shader) => {
    shader.uniforms.uTime = customUniforms.uTime;
    shader.vertexShader = shader.vertexShader.replace(
      "#include <common>",
      `
              #include <common>
  
              uniform float uTime;
  
              mat2 get2dRotateMatrix(float _angle)
              {
                  return mat2(cos(_angle), - sin(_angle), sin(_angle), cos(_angle));
              }
          `
    );
    shader.vertexShader = shader.vertexShader.replace(
      "#include <beginnormal_vertex>",
      `
          #include <beginnormal_vertex>
  
          float angle = (sin(position.y + uTime * 2.0)) * 0.1;
          mat2 rotateMatrix = get2dRotateMatrix(angle);
  
          objectNormal.xz = rotateMatrix * objectNormal.xz;
      `
    );
    shader.vertexShader = shader.vertexShader.replace(
      "#include <begin_vertex>",
      `
          #include <begin_vertex>
  
          transformed.xz = rotateMatrix * transformed.xz;
      `
    );
  };

  useFrame((state, delta) => {
    customUniforms.uTime.value += delta;
  });

  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.EYES.geometry}
        material={material}
        rotation-y={Math.PI / 2}
        scale={0.2}
        position={[-2.9, 0.9, 3.6]}
      ></mesh>
    </group>
  );
}

useGLTF.preload("/spid.glb");
