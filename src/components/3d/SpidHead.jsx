/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState, forwardRef } from "react";
import { useGLTF } from "@react-three/drei";
import {
  Selection,
  Select,
  EffectComposer,
  Outline,
} from "@react-three/postprocessing";

const SpidHead = forwardRef((props, ref) => {
  const { nodes, materials } = useGLTF("/minifbspidhead.glb");

  return (
    // <Select enabled={hovered}>
    <group
      {...props}
      ref={ref}
      dispose={null}
      position={props.position}
      rotation-y={props.rotationY}
      scale={props.scale}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.S_OUT.geometry}
        material={materials.BLACK_MAT}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.S_INNER.geometry}
        material={materials.BLACK_MAT}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.WEBS.geometry}
        material={materials.BLACK_MAT}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.EYES.geometry}
        material={materials.EYES}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Plane.geometry}
        material={materials.Brown}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Plane_1.geometry}
        material={materials.Red}
        ref={ref}
      />
    </group>
    // </Select>
  );
});

useGLTF.preload("/minifbspidhead.glb");

export default SpidHead;
